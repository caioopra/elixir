-> nil e false são sempre falsos

OPERADORES
+, -, *, /
div(x, y)	=> divisão inteira
rem(x, y)	=> resto da divisão

=> boolenaos: 
	||, &&, !
	and, or, not	=> primeiro argumento sempre deve ser booleano (true ou false)
 

COMPARAÇÕES
==, !=, ===, !=
>, >=, <, <=

	-> === -> strict comparision (2 == 2.0, mas 2 !== 2.0)

-> quaisquer dois tipos podem ser comparados (útil para sorting)
number < atom < reference < function < port < pid < tuple < map < list < bitstring


INTERPOLAÇÃO DE STRINGS
	name = "Caio"
	"Hello #{name}"		=> "Hello Caio"

CONCATENAÇÃO DE STRINGS (<>)
	name = "aaa"
	"Hello " <> name	=> "Hello aaa"


------------------------------------

Listas: coleção de valores (múltiplos tipos)
	lista = [3.14, "Caio", :atomo]

-> implementada com linked-list (prepending mais rápido que append
	prepend: ["valor" | lista]	=> ["valor", 3.14, ...]
	append:  lista ++ ["valor"]	=> [3.14, ..., "valor"]

-> concatenando listas (++)
	[1, 2] ++ [3, 4, 5]	=> [1, 2, 3, 4, 5]

-> removendo elemento de lista (--)	
	[1, 2, 2, 3, 2, 3] -- [1, 2, 3, 2]	=> [2, 3]
	-> faz remoção com strict comparision
		[2] -- [2.0]	=> [2]
		[2.0] -- [2.0]  => []


	
